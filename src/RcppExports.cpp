// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// h5_write_flat
void h5_write_flat(List const& data, std::string const& fname);
RcppExport SEXP _tgutil_h5_write_flat(SEXP dataSEXP, SEXP fnameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List const& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< std::string const& >::type fname(fnameSEXP);
    h5_write_flat(data, fname);
    return R_NilValue;
END_RCPP
}
// h5_read_flat
List h5_read_flat(std::string const& fname, Nullable<StringVector> const& datasets);
RcppExport SEXP _tgutil_h5_read_flat(SEXP fnameSEXP, SEXP datasetsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string const& >::type fname(fnameSEXP);
    Rcpp::traits::input_parameter< Nullable<StringVector> const& >::type datasets(datasetsSEXP);
    rcpp_result_gen = Rcpp::wrap(h5_read_flat(fname, datasets));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_tgutil_h5_write_flat", (DL_FUNC) &_tgutil_h5_write_flat, 2},
    {"_tgutil_h5_read_flat", (DL_FUNC) &_tgutil_h5_read_flat, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_tgutil(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
